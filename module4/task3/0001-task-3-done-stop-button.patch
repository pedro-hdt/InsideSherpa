From 66689413ac14482006fc6174332863ea7f957153 Mon Sep 17 00:00:00 2001
From: Pedro Teixeira <pedro.h.d.teixeira@gmail.com>
Date: Tue, 28 Jul 2020 19:39:08 +0100
Subject: [PATCH] task 3 done + stop button

---
 src/App.tsx            | 24 +++++++++++++++---------
 src/DataManipulator.ts | 33 +++++++++++++++++++++++----------
 src/Graph.tsx          | 26 ++++++++++++++++----------
 3 files changed, 54 insertions(+), 29 deletions(-)

diff --git a/src/App.tsx b/src/App.tsx
index 274d20b..406a60a 100644
--- a/src/App.tsx
+++ b/src/App.tsx
@@ -9,8 +9,12 @@ interface IState {
 }
 
 class App extends Component<{}, IState> {
+
+  private streamingInterval : number;
+
   constructor(props: {}) {
     super(props);
+    this.streamingInterval = NaN;
     this.state = {
       data: [],
       showGraph: false,
@@ -24,19 +28,20 @@ class App extends Component<{}, IState> {
   }
 
   getDataFromServer() {
-    let x = 0;
-    const interval = setInterval(() => {
+    this.streamingInterval = window.setInterval(() =>  {
       DataStreamer.getData((serverResponds: ServerRespond[]) => {
-        this.setState({
+        // Update the state by creating a new array of data that consists of
+        // Previous data in the state and the new data from server
+        this.setState({ 
           data: serverResponds,
           showGraph: true,
-        });
+         });
       });
-      x++;
-      if (x > 1000) {
-        clearInterval(interval);
-      }
-    }, 100);
+    }, 100); // keep getting data every 100ms (0.1s) indefinitely
+  }
+
+  stopDataFromServer() {
+    window.clearInterval(this.streamingInterval);
   }
 
   render() {
@@ -47,6 +52,7 @@ class App extends Component<{}, IState> {
         </header>
         <div className="App-content">
           <button className="btn btn-primary Stream-button" onClick={() => {this.getDataFromServer()}}>Start Streaming Data</button>
+          <button className="btn btn-danger Stream-button"  onClick={() => {this.stopDataFromServer()}}>Stop Streaming Data</button>
           <div className="Graph">
             {this.renderGraph()}
           </div>
diff --git a/src/DataManipulator.ts b/src/DataManipulator.ts
index f6b15ff..27c9f03 100644
--- a/src/DataManipulator.ts
+++ b/src/DataManipulator.ts
@@ -1,20 +1,33 @@
 import { ServerRespond } from './DataStreamer';
 
 export interface Row {
-  stock: string,
-  top_ask_price: number,
+  price_abc: number,
+  price_def: number,
+  ratio: number,
   timestamp: Date,
+  upper_bound: number,
+  lower_bound: number,
+  trigger_alert: number | undefined,
 }
 
 
 export class DataManipulator {
-  static generateRow(serverResponds: ServerRespond[]): Row[] {
-    return serverResponds.map((el: any) => {
-      return {
-        stock: el.stock,
-        top_ask_price: el.top_ask && el.top_ask.price || 0,
-        timestamp: el.timestamp,
-      };
-    })
+  static generateRow(serverResponds: ServerRespond[]): Row {
+    const priceABC = (serverResponds[0].top_ask.price + serverResponds[0].top_bid.price) / 2;
+    const priceDEF = (serverResponds[1].top_ask.price + serverResponds[1].top_bid.price) / 2;
+    const ratio = priceABC / priceDEF;
+    const upperBound = 1 + 0.05;
+    const lowerBound = 1 - 0.05;
+    return {
+      price_abc: priceABC,
+      price_def: priceDEF,
+      ratio,
+      timestamp: (serverResponds[0].timestamp > serverResponds[1].timestamp) ? 
+        serverResponds[0].timestamp : serverResponds[1].timestamp,
+      upper_bound: upperBound,
+      lower_bound: lowerBound,
+      trigger_alert: (ratio > upperBound || ratio < lowerBound) ? ratio : undefined,
+    };
+    
   }
 }
diff --git a/src/Graph.tsx b/src/Graph.tsx
index 58fb997..5acf486 100644
--- a/src/Graph.tsx
+++ b/src/Graph.tsx
@@ -11,6 +11,7 @@ interface IProps {
 interface PerspectiveViewerElement extends HTMLElement {
   load: (table: Table) => void,
 }
+
 class Graph extends Component<IProps, {}> {
   table: Table | undefined;
 
@@ -23,10 +24,13 @@ class Graph extends Component<IProps, {}> {
     const elem = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
 
     const schema = {
-      stock: 'string',
-      top_ask_price: 'float',
-      top_bid_price: 'float',
+      price_abc: 'float',
+      price_def: 'float',
+      ratio: 'float',
       timestamp: 'date',
+      upper_bound: 'float',
+      lower_bound: 'float',
+      trigger_alert: 'float'
     };
 
     if (window.perspective && window.perspective.worker()) {
@@ -36,23 +40,25 @@ class Graph extends Component<IProps, {}> {
       // Load the `table` in the `<perspective-viewer>` DOM reference.
       elem.load(this.table);
       elem.setAttribute('view', 'y_line');
-      elem.setAttribute('column-pivots', '["stock"]');
       elem.setAttribute('row-pivots', '["timestamp"]');
-      elem.setAttribute('columns', '["top_ask_price"]');
+      elem.setAttribute('columns', '["ratio", "lower_bound", "upper_bound", "trigger_alert"]');
       elem.setAttribute('aggregates', JSON.stringify({
-        stock: 'distinctcount',
-        top_ask_price: 'avg',
-        top_bid_price: 'avg',
+        price_abc: 'avg',
+        price_def: 'avg',
+        ratio: 'avg',
         timestamp: 'distinct count',
+        upper_bound: 'avg',
+        lower_bound: 'avg',
+        trigger_alert: 'avg'  
       }));
     }
   }
 
   componentDidUpdate() {
     if (this.table) {
-      this.table.update(
+      this.table.update([
         DataManipulator.generateRow(this.props.data),
-      );
+      ]);
     }
   }
 }
-- 
2.25.1

