From fcec2ae1ac405d8f116744bc3e8a813306818263 Mon Sep 17 00:00:00 2001
From: Pedro Teixeira <pedro.h.d.teixeira@gmail.com>
Date: Tue, 28 Jul 2020 11:19:15 +0100
Subject: [PATCH] task 2 done: graph as per picture + additional button to
 pause streaming

---
 src/App.tsx   | 38 ++++++++++++++++++++++++++++++--------
 src/Graph.tsx | 17 ++++++++++++++---
 2 files changed, 44 insertions(+), 11 deletions(-)

diff --git a/src/App.tsx b/src/App.tsx
index fdcd4b9..c30d5b0 100644
--- a/src/App.tsx
+++ b/src/App.tsx
@@ -8,6 +8,7 @@ import './App.css';
  */
 interface IState {
   data: ServerRespond[],
+  showGraph: boolean,
 }
 
 /**
@@ -15,13 +16,18 @@ interface IState {
  * It renders title, button and Graph react element.
  */
 class App extends Component<{}, IState> {
+
+  private streamingInterval : number;
+
   constructor(props: {}) {
     super(props);
 
+    this.streamingInterval = NaN;
     this.state = {
       // data saves the server responds.
       // We use this state to parse data down to the child element (Graph) as element property
       data: [],
+      showGraph: false,
     };
   }
 
@@ -29,18 +35,29 @@ class App extends Component<{}, IState> {
    * Render Graph react component with state.data parse as property data
    */
   renderGraph() {
-    return (<Graph data={this.state.data}/>)
+    if (this.state.showGraph) {
+      return (<Graph data={this.state.data}/>)
+    }
   }
 
   /**
    * Get new data from server and update the state with the new data
    */
   getDataFromServer() {
-    DataStreamer.getData((serverResponds: ServerRespond[]) => {
-      // Update the state by creating a new array of data that consists of
-      // Previous data in the state and the new data from server
-      this.setState({ data: [...this.state.data, ...serverResponds] });
-    });
+    this.streamingInterval = window.setInterval(() =>  {
+      DataStreamer.getData((serverResponds: ServerRespond[]) => {
+        // Update the state by creating a new array of data that consists of
+        // Previous data in the state and the new data from server
+        this.setState({ 
+          data: [...this.state.data, ...serverResponds],
+          showGraph: true,
+         });
+      });
+    }, 100); // keep getting data every 100ms (0.1s) indefinitely
+  }
+
+  stopDataFromServer() {
+    window.clearInterval(this.streamingInterval);
   }
 
   /**
@@ -59,9 +76,14 @@ class App extends Component<{}, IState> {
             // As part of your task, update the getDataFromServer() function
             // to keep requesting the data every 100ms until the app is closed
             // or the server does not return anymore data.
-            onClick={() => {this.getDataFromServer()}}>
+            onClick={() => this.getDataFromServer()}>
             Start Streaming Data
           </button>
+          <button className="btn btn-danger Stream-button"
+            // when button is click, our react app stops requesting data from the server
+            onClick={() => {this.stopDataFromServer()}}>
+            Stop Streaming Data
+          </button>
           <div className="Graph">
             {this.renderGraph()}
           </div>
@@ -71,4 +93,4 @@ class App extends Component<{}, IState> {
   }
 }
 
-export default App;
\ No newline at end of file
+export default App;
diff --git a/src/Graph.tsx b/src/Graph.tsx
index 76ea581..d73a91c 100644
--- a/src/Graph.tsx
+++ b/src/Graph.tsx
@@ -14,7 +14,7 @@ interface IProps {
  * Perspective library adds load to HTMLElement prototype.
  * This interface acts as a wrapper for Typescript compiler.
  */
-interface PerspectiveViewerElement {
+interface PerspectiveViewerElement extends HTMLElement {
   load: (table: Table) => void,
 }
 
@@ -32,7 +32,18 @@ class Graph extends Component<IProps, {}> {
 
   componentDidMount() {
     // Get element to attach the table from the DOM.
-    const elem: PerspectiveViewerElement = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
+    const elem: PerspectiveViewerElement = document.getElementsByTagName('perspective-viewer')[0] as PerspectiveViewerElement;
+
+    elem.setAttribute('view', 'y_line');
+    elem.setAttribute('column-pivots', '["stock"]');
+    elem.setAttribute('row-pivots', '["timestamp"]');
+    elem.setAttribute('columns', '["top_ask_price"]');
+    elem.setAttribute('aggregates', `
+      {"stock": "distinct count",
+      "top_ask_price": "avg",
+      "top_bid_price": "avg",
+      "timestamp": "distinct count"}
+    `)
 
     const schema = {
       stock: 'string',
@@ -70,4 +81,4 @@ class Graph extends Component<IProps, {}> {
   }
 }
 
-export default Graph;
\ No newline at end of file
+export default Graph;
-- 
2.25.1

